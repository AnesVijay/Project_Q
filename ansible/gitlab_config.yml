- name: Gitlab configuration
  hosts: gitlab
  become: yes

  vars_files:
    - vars.yml

  tasks:

    - name: Install packages
      apt:
        pkg:
          - curl
          - openssh-server
          - ca-certificates
          - tzdata
          - perl
          - python3-pip
        update_cache: yes

    - name: Add Gitlab package repository
      shell: curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | bash

    - name: Wait 10 seconds after adding gitlab package
      wait_for:
        timeout: 10

    - name: Install Gitlab package
      shell: apt install -y gitlab-ce
      # apt:
      #   name: gitlab-ce
      environment:
        EXTERNAL_URL: "http://{{ ansible_ssh_host }}"
        GITLAB_ROOT_PASSWORD: "{{ gitlab_root_pass }}"
      timeout: 900
      

    - name: Wait for a Gitlab boot
      shell: gitlab-ctl status
      register: shell_res
      delay: 30
      retries: 10
      until: shell_res.stdout_lines | reject('search','^run') | list | count == 0


    - name: Install pip module 'gitlab'
      pip:
        name:
          - python-gitlab

    - name: Create a Gitlab group
      community.general.gitlab_group:
        validate_certs: false
        api_url: "http://{{ ansible_ssh_host }}"
        api_username: root
        api_password: "{{ gitlab_root_pass }}"
        name: "{{ group_name }}"
        path: "{{ group_name }}"
        visibility: public
        state: present

    - name: Create Gitlab project in created group
      community.general.gitlab_project:
        api_url: "http://{{ ansible_ssh_host }}"
        validate_certs: false
        api_username: root
        api_password: "{{ gitlab_root_pass }}"
        name: "{{ proj_name }}"
        group: "{{ group_name }}"
        issues_enabled: false
        snippets_enabled: true
        initialize_with_readme: false
        visibility: public
        state: present
      register: proj_info

    - name: Add admin Personal Access Token with scope 'create_runner'
      pause:
        prompt: "The link to it \"http://{{ ansible_ssh_host }}/-/user_settings/personal_access_tokens\""
      register: pat
      when: gitlab_admin_pat != "" 
    
    - ansible.builtin.set_fact:
        admin_pat: '{{ pat["user_input"] }}'
        proj_id: "{{ proj_info['project']['id'] }}"

    - name: Curl to Gitlab
      shell: |
        curl --silent --request POST --url "http://{{ ansible_ssh_host }}/api/v4/user/runners" \
        --data "runner_type=project_type" \
        --data "project_id={{ proj_id }}" \
        --data "description=Runner for building" \
        --data "tag_list=docker-runner" \
        --header "PRIVATE-TOKEN: {{ admin_pat }}"
      register: runner_info
    
    - ansible.builtin.set_fact:
        runner_token: "{{ runner_info[\"stdout_lines\"][0].split(\",\")[1].split(\":\")[1] }}"

    - name: Check if repo is already exist
      ansible.builtin.stat:
        path: /var/TTGFinder
      register: proj_folder

    - name: Clone a repo from GitHub
      ansible.builtin.git:
        repo: https://github.com/ATAS-Digital/TTGFinder.git
        dest: /var/TTGFinder
      
      when: not proj_folder.stat.exists

    - name: Copy bash scripts to repo
      copy:
        src: "gitlab/{{ item }}"
        dest: /var
        mode: +x
        remote_src: false
      with_items:
        - "git-prepare.sh"
        - "ch-dir.sh"
        - "build-maven-project.sh"
      

    - name: Add docker files to repo
      copy:
        src: "gitlab/{{ item }}"
        dest: /var/TTGFinder
        remote_src: false
      with_items:
        - docker-compose.yml
        - Dockerfile
      
    
    - name: Copy nginx config to repo
      copy:
        src: gitlab/nginx
        dest: /var/TTGFinder
        remote_src: false
      
    
    - name: Copy gitlab pipline file to repo
      copy:
        src: gitlab/.gitlab-ci.yml
        dest: /var/TTGFinder
        remote_src: false
      

    - name: Push repo to Gitlab
      expect:
        command: "/var/git-prepare.sh -link http://{{ ansible_ssh_host }}/{{ group_name }}/{{ proj_name }}.git"
        chdir: /var
        responses:
          Username: "root"
          Password: "{{ gitlab_root_pass }}"
        timeout: 60
      when: not proj_folder.stat.exists
    
    - name: Copy dockerfile for custom gitlab-runner image
      copy:
        src: gitlab/gitlab-runner.dockerfile
        dest: /var
        remote_src: false
      
    
    - ansible.builtin.import_tasks:
        file: docker-install.yml
      

    - name: Build custom gitlab-runner image
      shell: "docker build /var -f /var/gitlab-runner.dockerfile -t my-runner:latest"

    - name: Run gitlab-runner container
      community.docker.docker_container:
        name: my-runner
        image: my-runner:latest
        state: started
        volumes:
          - /srv/gitlab-runner/config:/etc/gitlab-runner
          - /var/run/docker.sock:/var/run/docker.sock
      
    
    - name: Check if runner has already been registered
      ansible.builtin.stat:
        path: /srv/gitlab-runner/config/config.toml
      register: toml_conf

    - name: Register runner
      ansible.builtin.expect:
        command: "docker exec -ti my-runner gitlab-runner register"
        responses:
          Enter the GitLab instance URL: "http://{{ hostvars['gitlab']['ansible_host'] }}"
          Enter the registration token: "{{ runner_token[1:-1] }}"
          name for the runner: ""
          Enter an executor: "shell"
          description for the runner: ""
          Enter tags for the runner: docker-runner
          Enter optional maintenance note for the runner: ""
      when: not toml_conf.stat.exists
      timeout: 60

# ---------------------- Configuring GitLab for sharing metrics ---------------------- #

    - name: Add Prometheus address to whitelist in Gitlab config
      ansible.builtin.lineinfile:
        path: /etc/gitlab/gitlab.rb
        insertbefore: BOF
        line: "gitlab_rails['monitoring_whitelist'] = ['127.0.0.0/8', '{{ hostvars['monitor']['ansible_host'] }}']"
    
    - name: Recofigure Gitlab to accept whitelist changes
      shell: gitlab-ctl reconfigure

- name: Save created variables to vars
  hosts: localhost
  tasks:
    - ansible.builtin.lineinfile:
        path: vars.yml
        regexp: "gitlab_admin_pat:"
        line: "gitlab_admin_pat: {{ hostvars['gitlab']['admin_pat'] }}"
    - ansible.builtin.lineinfile:
        path: vars.yml
        regexp: "proj_id:"
        line: "proj_id: {{ hostvars['gitlab']['proj_id'] }}"